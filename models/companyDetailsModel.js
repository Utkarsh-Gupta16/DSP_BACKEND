import mongoose from "mongoose";

const companyDetailsSchema = new mongoose.Schema({
  companyId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Company",
    required: true,
  },
  employeeId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
    required: true,
  },
  formData: {
    website: String,
    mailIds: [String],
    linkedinProfile: String,
    headquarterAddress: String,
    foundationYear: String,
    presentInCountries: [String],
    locationOfEachCountryOffice: [String],
    businessDevelopmentManager: String,
    cco: String,
    cdo: String,
    ceo: String,
    cfo: String,
    chro: String,
    cio: String,
    ciso: String,
    cmo: String,
    coFounder: String,
    coo: String,
    cpo: String,
    cro: String,
    cso: String,
    cto: String,
    customerSuccessManager: String,
    cxo: String,
    cybersecurityDirector: String,
    cybersecurityManager: String,
    devOpsManager: String,
    directorOfBusinessDevelopment: String,
    directorOfDigitalMarketing: String,
    directorOfFinance: String,
    directorOfHr: String,
    directorOfIt: String,
    directorOfMarketing: String,
    directorOfOperations: String,
    directorOfProcurement: String,
    directorOfProductManagement: String,
    directorOfSales: String,
    directorOfStrategy: String,
    directorOfSupplyChain: String,
    directorOfTalentAcquisition: String,
    ecommerceDirector: String,
    ecommerceManager: String,
    evp: String,
    financeAccounting: String,
    financeDirector: String,
    financialController: String,
    founder: String,
    founderCoFounder: String,
    gm: String,
    headOfBusinessDevelopment: String,
    headOfCloudInfrastructure: String,
    headOfCustomerSuccess: String,
    headOfDigitalTransformation: String,
    headOfGrowthStrategy: String,
    headOfHr: String,
    headOfIt: String,
    headOfItInfrastructure: String,
    headOfManufacturing: String,
    headOfMarketing: String,
    headOfMarketplaceManagement: String,
    headOfPartnerships: String,
    headOfPerformanceMarketing: String,
    headOfPropertyManagement: String,
    headOfSales: String,
    headOfSeoPpcSocialMedia: String,
    headOfSoftwareDevelopment: String,
    headOfStrategy: String,
    hrBusinessPartner: String,
    investmentManager: String,
    itDirector: String,
    itManager: String,
    technologyManager: String,
    managingBroker: String,
    md: String,
    marketingManager: String,
    operationsManager: String,
    owner: String,
    partner: String,
    performanceMarketingManager: String,
    president: String,
    principal: String,
    procurementManager: String,
    productManager: String,
    realEstateDeveloper: String,
    riskComplianceOfficer: String,
    salesManager: String,
    securityManager: String,
    seniorBusinessDevelopmentManager: String,
    seniorItManager: String,
    seniorMarketingManager: String,
    seniorProcurementManager: String,
    seniorVicePresident: String,
    supplyChainManager: String,
    vpBusinessDevelopment: String,
    vpCustomerSuccess: String,
    vpEngineering: String,
    vpFinance: String,
    vpIt: String,
    vpMarketing: String,
    vpOperations: String,
    vpSales: String,
    vpStrategy: String,
    vpTechnology: String,
    vpHr: String,
    vpProduct: String,
  },
  orderId: { type: mongoose.Schema.Types.ObjectId, ref: 'Order', required: true }, // Add this
  status: {
    type: String,
    enum: ["pending", "approved", "rejected", "stale"],
    default: "pending",
  },
  submittedDate: {
    type: Date,
    default: Date.now,
  },
  approvedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
  },
  approvedAt: {
    type: Date,
  },
  returnToEmployee: { type: Boolean, default: false }, // New field
  pendingRefill: { type: Boolean, default: false },
  lastRefreshed: {
    type: Date,
    default: Date.now,
  },
});

// Add TTL index for 90 days after approvedAt
companyDetailsSchema.index({ approvedAt: 1 }, { expireAfterSeconds: 90 * 24 * 60 * 60 });

const CompanyDetails = mongoose.model("CompanyDetails", companyDetailsSchema);

export default CompanyDetails;